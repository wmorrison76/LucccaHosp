{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/github.ts","../../shared/nutrition.ts","../../server/routes/nutrition.ts","../../server/routes/recipe.ts","../../server/routes/recipeImage.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"../../shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import type { RequestHandler } from \"express\";\n\nconst ALLOWED_HOSTS = new Set([\n  \"github.com\",\n  \"raw.githubusercontent.com\",\n  \"codeload.github.com\",\n  \"api.github.com\",\n]);\n\nfunction isAllowed(url: string) {\n  try { const u = new URL(url); return ALLOWED_HOSTS.has(u.hostname); } catch { return false; }\n}\n\nfunction parseGithubRepo(url: string): { owner: string; repo: string } | null {\n  try {\n    const u = new URL(url);\n    if (u.hostname !== \"github.com\") return null;\n    const parts = u.pathname.replace(/^\\/+/, \"\").split(\"/\");\n    if (parts.length < 2) return null;\n    return { owner: parts[0], repo: parts[1].replace(/\\.git$/, \"\") };\n  } catch { return null; }\n}\n\nexport const githubRaw: RequestHandler = async (req, res) => {\n  try {\n    const repo = String(req.query.repo || \"\");\n    const branch = String(req.query.branch || \"main\");\n    const path = String(req.query.path || \"\");\n    let target: string | null = null;\n\n    if (/raw\\.githubusercontent\\.com\\//.test(repo)) {\n      target = repo; // already raw URL\n    } else if (isAllowed(repo)) {\n      target = repo;\n    } else {\n      const r = parseGithubRepo(repo);\n      if (!r) return res.status(400).json({ error: \"Invalid GitHub repository URL\" });\n      const p = path.replace(/^\\/+/, \"\");\n      target = `https://raw.githubusercontent.com/${r.owner}/${r.repo}/${encodeURIComponent(branch)}/${p}`;\n    }\n\n    if (!target) return res.status(400).json({ error: \"Bad request\" });\n\n    const resp = await fetch(target, { headers: { Accept: \"application/vnd.github.raw\" } });\n    const buf = Buffer.from(await resp.arrayBuffer());\n    res.status(resp.status);\n    if (resp.headers.get(\"content-type\")) res.setHeader(\"Content-Type\", resp.headers.get(\"content-type\") as string);\n    res.send(buf);\n  } catch (e: any) {\n    res.status(500).json({ error: e?.message || \"Proxy error\" });\n  }\n};\n\nexport const githubZip: RequestHandler = async (req, res) => {\n  try {\n    const repo = String(req.query.repo || \"\");\n    const branch = String(req.query.branch || \"main\");\n    let target: string | null = null;\n\n    if (/codeload\\.github\\.com\\//.test(repo) || /\\.zip$/.test(repo)) {\n      target = repo;\n    } else {\n      const r = parseGithubRepo(repo);\n      if (!r) return res.status(400).json({ error: \"Invalid GitHub repository URL\" });\n      target = `https://codeload.github.com/${r.owner}/${r.repo}/zip/refs/heads/${encodeURIComponent(branch)}`;\n    }\n\n    const resp = await fetch(target);\n    const buf = Buffer.from(await resp.arrayBuffer());\n    res.status(resp.status);\n    res.setHeader(\"Content-Type\", resp.headers.get(\"content-type\") || \"application/zip\");\n    res.setHeader(\"Content-Disposition\", resp.headers.get(\"content-disposition\") || `attachment; filename=repo.zip`);\n    res.send(buf);\n  } catch (e: any) {\n    res.status(500).json({ error: e?.message || \"Proxy error\" });\n  }\n};\n","export type NutritionProfile = {\n  calories: number;\n  fat: number;\n  saturatedFat: number;\n  transFat: number;\n  carbs: number;\n  fiber: number;\n  sugars: number;\n  protein: number;\n  sodium: number;\n};\n\nexport type NutritionDiagnostics = {\n  ingredients: number;\n  matched: number;\n  unknown: number;\n  lowConfidence: number;\n  averageConfidence: number;\n  totalWeight: number;\n  matchedWeight: number;\n  unmatchedWeight: number;\n  yieldAverage: number;\n};\n\nconst makeProfile = (\n  calories: number,\n  fat: number,\n  saturatedFat: number,\n  transFat: number,\n  carbs: number,\n  fiber: number,\n  sugars: number,\n  protein: number,\n  sodium: number,\n): NutritionProfile => ({\n  calories,\n  fat,\n  saturatedFat,\n  transFat,\n  carbs,\n  fiber,\n  sugars,\n  protein,\n  sodium,\n});\n\nexport const NUTRITION_DATABASE: Record<string, NutritionProfile> = {\n  flour_all_purpose: makeProfile(364, 1, 0.2, 0, 76.3, 2.7, 0.3, 10.3, 2),\n  flour_bread: makeProfile(361, 1.6, 0.3, 0, 72.5, 2.4, 0.4, 12.5, 3),\n  flour_cake: makeProfile(357, 0.8, 0.2, 0, 77.8, 1.3, 0.4, 8.3, 3),\n  flour_almond: makeProfile(571, 50, 3.9, 0, 21.6, 10.4, 4.4, 21.2, 1),\n  sugar_granulated: makeProfile(387, 0, 0, 0, 100, 0, 100, 0, 1),\n  sugar_brown: makeProfile(380, 0, 0, 0, 98.1, 0, 96.2, 0.1, 28),\n  sugar_powdered: makeProfile(389, 0, 0, 0, 99.8, 0, 97.7, 0, 1),\n  honey: makeProfile(304, 0, 0, 0, 82.4, 0.2, 82.1, 0.3, 4),\n  maple_syrup: makeProfile(260, 0.1, 0, 0, 67, 0, 60.5, 0, 12),\n  corn_syrup: makeProfile(286, 0, 0, 0, 77, 0, 77, 0, 18),\n  molasses: makeProfile(290, 0.1, 0, 0, 74.7, 0, 74.7, 0, 37),\n  cocoa_powder: makeProfile(228, 13.7, 8.1, 0, 57.9, 37, 1.8, 19.6, 21),\n  chocolate_dark: makeProfile(546, 31, 19, 0, 61, 7, 48, 5, 20),\n  chocolate_milk: makeProfile(535, 30.7, 18, 0.3, 58.4, 3.4, 52.8, 7.6, 79),\n  vanilla_extract: makeProfile(288, 0.1, 0, 0, 12.7, 0, 12.7, 0, 9),\n  water: makeProfile(0, 0, 0, 0, 0, 0, 0, 0, 1),\n  butter_unsalted: makeProfile(717, 81, 51, 3.3, 0.1, 0, 0.1, 0.9, 11),\n  margarine: makeProfile(717, 80, 20, 3, 0.7, 0, 0.7, 0.2, 720),\n  oil_olive: makeProfile(884, 100, 14, 0, 0, 0, 0, 0, 2),\n  oil_avocado: makeProfile(884, 100, 12, 0, 0, 0, 0, 0, 7),\n  oil_canola: makeProfile(884, 100, 7, 0, 0, 0, 0, 0, 0),\n  oil_vegetable: makeProfile(884, 100, 15, 0, 0, 0, 0, 0, 0),\n  shortening: makeProfile(884, 100, 25, 12, 0, 0, 0, 0, 0),\n  egg_whole: makeProfile(155, 10.6, 3.1, 0.1, 1.1, 0, 1.1, 12.6, 124),\n  egg_yolk: makeProfile(322, 26.5, 9.6, 0.1, 3.6, 0, 3.6, 15.9, 48),\n  egg_white: makeProfile(52, 0.2, 0, 0, 0.7, 0, 0.7, 10.9, 166),\n  milk_whole: makeProfile(61, 3.3, 1.9, 0.1, 4.8, 0, 4.8, 3.2, 44),\n  milk_2_percent: makeProfile(50, 2, 1.3, 0.1, 5, 0, 5, 3.4, 46),\n  milk_skim: makeProfile(34, 0.1, 0.1, 0, 5, 0, 5, 3.4, 51),\n  buttermilk: makeProfile(40, 1, 0.6, 0, 4.8, 0, 4.8, 3.3, 52),\n  half_and_half: makeProfile(123, 10, 6.2, 0.4, 9.7, 0, 9.3, 3.5, 125),\n  cream_heavy: makeProfile(340, 36, 23, 1.5, 2.8, 0, 2.8, 2.1, 40),\n  yogurt_plain: makeProfile(59, 3.3, 2.1, 0.1, 4.7, 0, 4.7, 10, 36),\n  sour_cream: makeProfile(214, 20, 12.4, 0.8, 4.6, 0, 3.4, 2.4, 52),\n  cheese_cheddar: makeProfile(403, 33, 19, 1.1, 1.3, 0, 0.5, 24.9, 621),\n  cheese_mozzarella: makeProfile(280, 17, 10, 0.7, 3.1, 0, 1.3, 28, 627),\n  cheese_parmesan: makeProfile(431, 29, 19.6, 1.5, 4.1, 0, 0.9, 38, 1529),\n  cheese_cream: makeProfile(342, 34, 21, 1.2, 4.1, 0, 3.2, 6, 321),\n  cheese_goat: makeProfile(364, 30, 21, 0.8, 2.2, 0, 2.1, 22, 423),\n  bacon: makeProfile(541, 42, 14.2, 1.4, 1.4, 0, 1.4, 37, 1717),\n  ham: makeProfile(145, 5.5, 1.9, 0.1, 1.5, 0, 1.5, 21, 1200),\n  chicken_breast: makeProfile(165, 3.6, 1, 0, 0, 0, 0, 31, 74),\n  chicken_thigh: makeProfile(209, 11, 3.3, 0.1, 0, 0, 0, 26, 90),\n  chicken_wing: makeProfile(203, 13, 3.7, 0.1, 0, 0, 0, 20, 87),\n  turkey_ground: makeProfile(189, 10.4, 2.6, 0, 0, 0, 0, 22, 90),\n  beef_ground_90: makeProfile(176, 10, 4.2, 0.5, 0, 0, 0, 20, 72),\n  beef_ground_80: makeProfile(254, 17, 7, 1.1, 0, 0, 0, 26, 75),\n  beef_steak: makeProfile(217, 12, 5, 0.6, 0, 0, 0, 26, 60),\n  pork_loin: makeProfile(201, 12, 4.3, 0.1, 0, 0, 0, 22, 62),\n  pork_belly: makeProfile(518, 53, 19, 0.2, 0, 0, 0, 9, 73),\n  sausage_pork: makeProfile(301, 27, 9, 0.1, 1.7, 0, 1.4, 12, 795),\n  lamb: makeProfile(294, 21, 9, 0.8, 0, 0, 0, 25, 72),\n  venison: makeProfile(158, 3.2, 1.5, 0, 0, 0, 0, 30, 67),\n  salmon: makeProfile(206, 13, 3.1, 0, 0, 0, 0, 20, 59),\n  tuna: makeProfile(144, 0.5, 0.1, 0, 0, 0, 0, 23, 50),\n  cod: makeProfile(82, 0.7, 0.1, 0, 0, 0, 0, 18, 54),\n  shrimp: makeProfile(99, 0.3, 0.1, 0, 0.2, 0, 0.2, 24, 111),\n  scallop: makeProfile(92, 0.8, 0.2, 0, 3.2, 0, 0, 18, 667),\n  mussel: makeProfile(172, 4.5, 0.8, 0, 7.4, 0, 0, 24, 369),\n  tofu_firm: makeProfile(144, 8.7, 1.3, 0, 3, 2.3, 0.6, 15.7, 14),\n  tempeh: makeProfile(193, 10.8, 2.3, 0, 7.7, 1.4, 1.1, 20.3, 9),\n  seitan: makeProfile(143, 2.3, 0.4, 0, 8.1, 0.6, 0.4, 25, 13),\n  lentils_cooked: makeProfile(116, 0.4, 0.1, 0, 20.1, 7.9, 1.8, 9, 2),\n  chickpeas_cooked: makeProfile(164, 2.6, 0.3, 0, 27.4, 7.6, 4.8, 8.9, 7),\n  black_beans_cooked: makeProfile(132, 0.5, 0.1, 0, 23.7, 8.7, 0.3, 8.9, 1),\n  kidney_beans_cooked: makeProfile(127, 0.5, 0.1, 0, 22.8, 6.4, 0.6, 8.7, 2),\n  rice_white_cooked: makeProfile(130, 0.3, 0.1, 0, 28.2, 0.4, 0.1, 2.7, 1),\n  rice_brown_cooked: makeProfile(123, 1, 0.3, 0, 25.6, 1.8, 0.4, 2.7, 4),\n  quinoa_cooked: makeProfile(120, 1.9, 0.2, 0, 21.3, 2.8, 0.9, 4.4, 7),\n  pasta_cooked: makeProfile(131, 1.1, 0.2, 0, 25, 1.3, 0.9, 5, 6),\n  bread_white: makeProfile(266, 3.3, 0.8, 0.1, 49, 2.7, 5, 8.9, 490),\n  bread_whole_wheat: makeProfile(247, 3.4, 0.7, 0.1, 43, 6, 6, 12, 430),\n  tortilla_flour: makeProfile(310, 9.6, 2.6, 0.1, 49, 3.7, 3.7, 8.1, 810),\n  tortilla_corn: makeProfile(218, 2.9, 0.4, 0, 45, 6.3, 1.2, 5.7, 15),\n  oats_rolled: makeProfile(389, 6.9, 1.2, 0, 66.3, 10.6, 0.9, 16.9, 2),\n  cereal_cornflakes: makeProfile(357, 0.4, 0.1, 0, 84.5, 3, 8.7, 7.5, 729),\n  granola: makeProfile(471, 20, 3.4, 0, 64.7, 6.5, 24.3, 10, 273),\n  potato_raw: makeProfile(77, 0.1, 0, 0, 17.6, 2.2, 0.8, 2, 7),\n  potato_baked: makeProfile(93, 0.1, 0, 0, 21.2, 2.2, 1.2, 2.5, 72),\n  sweet_potato: makeProfile(86, 0.1, 0, 0, 20.1, 3, 4.2, 1.6, 55),\n  carrot: makeProfile(41, 0.2, 0, 0, 9.6, 2.8, 4.7, 0.9, 69),\n  beet: makeProfile(43, 0.2, 0, 0, 9.6, 2.8, 6.8, 1.6, 78),\n  corn: makeProfile(96, 1.5, 0.2, 0, 21, 2.4, 4.5, 3.4, 15),\n  peas: makeProfile(81, 0.4, 0.1, 0, 14.5, 5.1, 5.7, 5.4, 5),\n  broccoli: makeProfile(55, 0.6, 0.1, 0, 11.2, 3.8, 2.2, 3.7, 33),\n  cauliflower: makeProfile(25, 0.3, 0, 0, 4.9, 2, 1.9, 1.9, 30),\n  kale: makeProfile(49, 0.9, 0.1, 0, 8.8, 3.6, 2.3, 4.3, 38),\n  spinach: makeProfile(23, 0.4, 0.1, 0, 3.6, 2.2, 0.4, 2.9, 79),\n  lettuce_romaine: makeProfile(17, 0.3, 0, 0, 3.3, 2.1, 1.2, 1.2, 8),\n  cabbage_green: makeProfile(25, 0.1, 0, 0, 5.8, 2.5, 3.2, 1.3, 18),\n  onion: makeProfile(40, 0.1, 0, 0, 9.3, 1.7, 4.2, 1.1, 4),\n  garlic: makeProfile(149, 0.5, 0.1, 0, 33, 2.1, 1, 6.4, 17),\n  shallot: makeProfile(72, 0.1, 0, 0, 16.8, 3.2, 7.9, 2.5, 12),\n  leek: makeProfile(61, 0.3, 0.1, 0, 14.2, 1.8, 3.9, 1.5, 20),\n  scallion: makeProfile(32, 0.2, 0, 0, 7.3, 2.6, 2.3, 1.8, 16),\n  cilantro: makeProfile(23, 0.5, 0.0, 0, 3.7, 2.8, 0.9, 2.1, 46),\n  parsley_fresh: makeProfile(36, 0.8, 0.1, 0, 6.3, 3.3, 0.9, 3, 56),\n  dill_fresh: makeProfile(43, 1.1, 0.1, 0, 7, 2.1, 0.5, 3.5, 61),\n  basil_fresh: makeProfile(23, 0.6, 0.1, 0, 3.6, 1.6, 0.3, 3.2, 4),\n  mint_fresh: makeProfile(44, 0.7, 0.2, 0, 8.4, 6.8, 0.3, 3.3, 31),\n  celery: makeProfile(16, 0.2, 0, 0, 3, 1.6, 1.3, 0.7, 80),\n  bell_pepper: makeProfile(26, 0.3, 0, 0, 6, 2.1, 4.2, 0.9, 2),\n  jalapeno: makeProfile(29, 0.4, 0.1, 0, 6.5, 2.8, 4.1, 0.9, 3),\n  tomato: makeProfile(18, 0.2, 0, 0, 3.9, 1.2, 2.6, 0.9, 5),\n  cucumber: makeProfile(15, 0.1, 0, 0, 3.6, 0.5, 1.7, 0.7, 2),\n  zucchini: makeProfile(17, 0.3, 0, 0, 3.1, 1, 2.5, 1.2, 8),\n  eggplant: makeProfile(25, 0.2, 0, 0, 5.9, 3, 3.5, 1, 2),\n  mushroom_white: makeProfile(22, 0.3, 0, 0, 3.3, 1, 2, 3.1, 5),\n  mushroom_cremini: makeProfile(22, 0.3, 0, 0, 3.3, 1, 2, 3.1, 5),\n  avocado: makeProfile(160, 14.7, 2.1, 0, 8.5, 6.7, 0.7, 2, 7),\n  banana: makeProfile(89, 0.3, 0.1, 0, 22.8, 2.6, 12.2, 1.1, 1),\n  apple: makeProfile(52, 0.2, 0, 0, 13.8, 2.4, 10.4, 0.3, 1),\n  pear: makeProfile(57, 0.1, 0, 0, 15.2, 3.1, 9.8, 0.4, 1),\n  orange: makeProfile(47, 0.1, 0, 0, 11.8, 2.4, 9.4, 0.9, 0),\n  lemon: makeProfile(29, 0.3, 0, 0, 9.3, 2.8, 2.5, 1.1, 2),\n  lime: makeProfile(30, 0.2, 0, 0, 10.5, 2.8, 1.7, 0.7, 2),\n  pineapple: makeProfile(50, 0.1, 0, 0, 13.1, 1.4, 9.9, 0.5, 1),\n  mango: makeProfile(60, 0.4, 0.1, 0, 15, 1.6, 13.7, 0.8, 1),\n  strawberry: makeProfile(32, 0.3, 0, 0, 7.7, 2, 4.9, 0.7, 1),\n  blueberry: makeProfile(57, 0.3, 0, 0, 14.5, 2.4, 9.7, 0.7, 1),\n  raspberry: makeProfile(52, 0.7, 0, 0, 12, 6.5, 4.4, 1.2, 1),\n  grape: makeProfile(69, 0.2, 0, 0, 18.1, 0.9, 15.5, 0.7, 2),\n  watermelon: makeProfile(30, 0.2, 0, 0, 7.6, 0.4, 6.2, 0.6, 1),\n  cranberry_dried: makeProfile(325, 1.4, 0.1, 0, 82, 5.3, 65, 0.4, 45),\n  raisin: makeProfile(299, 0.5, 0.1, 0, 79.2, 4.5, 59.2, 3.1, 26),\n  date: makeProfile(282, 0.4, 0, 0, 75, 8, 63, 2.5, 2),\n  fig_dried: makeProfile(249, 0.9, 0.1, 0, 63.9, 9.8, 47.9, 3.3, 10),\n  prune: makeProfile(240, 0.4, 0.1, 0, 63, 7.1, 38, 2.2, 2),\n  almond: makeProfile(579, 49.9, 3.8, 0, 21.6, 12.5, 4.4, 21.2, 1),\n  walnut: makeProfile(654, 65.2, 6.1, 0, 13.7, 6.7, 2.6, 15.2, 2),\n  pecan: makeProfile(691, 72, 6.2, 0, 13.9, 9.6, 3.9, 9.2, 0),\n  pistachio: makeProfile(562, 45.4, 5.6, 0, 27.2, 10.6, 7.8, 20.2, 1),\n  cashew: makeProfile(553, 43.9, 7.8, 0, 30.2, 3.3, 5.9, 18.2, 12),\n  peanut: makeProfile(567, 49.2, 6.3, 0, 16.1, 8.5, 4.7, 25.8, 18),\n  peanut_butter: makeProfile(588, 50, 10, 0, 20, 6, 9, 25, 372),\n  tahini: makeProfile(595, 53.8, 9.5, 0, 21.2, 9.3, 0.5, 17, 115),\n  sunflower_seed: makeProfile(584, 51.5, 4.5, 0, 20, 8.6, 2.6, 20.8, 9),\n  chia_seed: makeProfile(486, 30.7, 3.3, 0, 42.1, 34.4, 0, 16.5, 16),\n  flax_seed: makeProfile(534, 42.2, 3.7, 0, 28.9, 27.3, 1.6, 18.3, 30),\n  pumpkin_seed: makeProfile(559, 49, 8.7, 0, 10.7, 6, 1.4, 30, 7),\n  coconut_shredded: makeProfile(660, 65, 57, 0, 24, 16, 7, 7, 35),\n  coconut_milk: makeProfile(230, 24, 21, 0, 6, 2.2, 3.3, 2.3, 15),\n  coconut_water: makeProfile(19, 0.2, 0, 0, 3.7, 1.1, 3.7, 0.7, 105),\n  sugar_coconut: makeProfile(382, 0.2, 0, 0, 92, 2, 92, 0.7, 45),\n  salt: makeProfile(0, 0, 0, 0, 0, 0, 0, 0, 38758),\n  pepper_black: makeProfile(251, 3.3, 1.4, 0, 64, 25.3, 0.6, 10.4, 20),\n  cumin_ground: makeProfile(375, 22.3, 1.5, 0, 44.2, 10.5, 2.3, 17.8, 168),\n  coriander_ground: makeProfile(298, 17.8, 1, 0, 54.8, 41.9, 0, 12.4, 35),\n  paprika: makeProfile(282, 12.9, 2.1, 0, 54, 34.9, 10.3, 14.1, 68),\n  chili_powder: makeProfile(282, 14.3, 2.5, 0, 49, 34.8, 11.5, 12.5, 2860),\n  cayenne: makeProfile(318, 17.3, 3.3, 0, 56.6, 27.2, 10.3, 12, 30),\n  garlic_powder: makeProfile(331, 0.7, 0.2, 0, 72.7, 9, 2.6, 16.6, 60),\n  onion_powder: makeProfile(341, 1, 0.2, 0, 79.1, 15, 6.6, 10, 55),\n  cinnamon_ground: makeProfile(247, 1.2, 0.3, 0, 80.6, 53.1, 2.2, 4, 10),\n  nutmeg: makeProfile(525, 36.3, 25.9, 0, 49.3, 20.8, 28.5, 5.8, 16),\n  ginger_ground: makeProfile(335, 4.2, 2.6, 0, 70.8, 14.1, 3.4, 8.9, 27),\n  turmeric: makeProfile(312, 3.3, 1.8, 0, 67.1, 22.7, 3.2, 9.7, 27),\n  clove: makeProfile(323, 20.1, 5.4, 0, 61.2, 33.9, 2.4, 6, 277),\n  cardamom: makeProfile(311, 6.7, 0.7, 0, 68.5, 28, 0, 10.8, 18),\n  oregano_dried: makeProfile(265, 4.3, 1.6, 0, 68.9, 42.5, 4.1, 9, 25),\n  thyme_dried: makeProfile(276, 7.4, 3.0, 0, 63.9, 37, 1.7, 9.1, 55),\n  rosemary_dried: makeProfile(331, 15.2, 7, 0, 64.1, 42.6, 4.9, 4.9, 50),\n  basil_dried: makeProfile(251, 3.2, 0.6, 0, 60, 37.7, 1.7, 23, 76),\n  parsley_dried: makeProfile(292, 5.5, 0.8, 0, 50.6, 26.7, 7.3, 26.6, 452),\n  dill_dried: makeProfile(253, 4.4, 1.1, 0, 55.2, 13.6, 0, 19.9, 2080),\n  soy_sauce: makeProfile(53, 0.6, 0.1, 0, 4.9, 0.8, 0.4, 8.1, 5493),\n  vinegar_white: makeProfile(21, 0, 0, 0, 0.4, 0, 0.4, 0, 5),\n  vinegar_apple_cider: makeProfile(22, 0, 0, 0, 0.9, 0, 0.4, 0, 5),\n  vinegar_rice: makeProfile(20, 0, 0, 0, 0.9, 0, 0.1, 0, 4),\n  vinegar_balsamic: makeProfile(88, 0, 0, 0, 17, 0, 14, 0.5, 23),\n  worcestershire_sauce: makeProfile(78, 0, 0, 0, 19, 0, 17, 0.8, 907),\n  fish_sauce: makeProfile(35, 0, 0, 0, 4, 0, 4, 5, 7927),\n  miso: makeProfile(199, 6, 1, 0, 26, 5.4, 6.2, 12, 3728),\n  gochujang: makeProfile(191, 3.6, 0.5, 0, 35, 3.3, 16.7, 7.1, 2350),\n  ketchup: makeProfile(112, 0.2, 0, 0, 25.8, 0.3, 22.8, 1.3, 907),\n  mustard_yellow: makeProfile(66, 4.4, 0.2, 0, 5.3, 4, 1.9, 4.4, 1135),\n  mayonnaise: makeProfile(680, 75, 11.7, 0.2, 0.6, 0, 0.6, 1, 635),\n  bbq_sauce: makeProfile(165, 0.4, 0.1, 0, 38.9, 0.5, 33, 1.4, 910),\n  hot_sauce: makeProfile(29, 0.5, 0.1, 0, 6.2, 0.5, 2.5, 1, 1100),\n  vinaigrette: makeProfile(320, 30, 4, 0, 12, 0, 11, 1, 620),\n  pesto: makeProfile(445, 43, 8, 0.1, 10, 2, 2, 6, 1040),\n  hummus: makeProfile(264, 15, 2.1, 0, 23, 6, 1, 8, 562),\n  salsa: makeProfile(36, 0.2, 0, 0, 8.3, 1.5, 3.9, 1.5, 430),\n  guacamole: makeProfile(160, 14, 2, 0, 8.5, 6.7, 1.4, 2, 240),\n  yogurt_greek_plain: makeProfile(97, 5, 3, 0, 3.6, 0, 3.6, 9, 47),\n  ricotta_part_skim: makeProfile(174, 10, 6.4, 0.3, 6.4, 0, 0, 11.3, 84),\n  mascarpone: makeProfile(435, 44, 29, 1.7, 3.9, 0, 3.9, 7.6, 45),\n  creme_fraiche: makeProfile(455, 45, 28, 1.7, 4, 0, 4, 5.5, 46),\n  gelatin: makeProfile(355, 0, 0, 0, 0, 0, 0, 85, 200),\n  pectin: makeProfile(136, 0, 0, 0, 90, 90, 0, 0, 30),\n  cornstarch: makeProfile(381, 0.1, 0, 0, 91, 0.9, 0.1, 0.3, 9),\n  baking_powder: makeProfile(53, 0, 0, 0, 28, 0, 0, 0, 11453),\n  baking_soda: makeProfile(0, 0, 0, 0, 0, 0, 0, 0, 1259),\n  yeast_active_dry: makeProfile(325, 7.5, 1, 0, 41, 26, 13, 40, 30),\n  gelatin_sheet: makeProfile(335, 0, 0, 0, 0, 0, 0, 85, 200),\n  espresso_powder: makeProfile(2, 0, 0, 0, 0.4, 0, 0, 0.1, 2),\n  coffee_brewed: makeProfile(1, 0, 0, 0, 0.2, 0, 0, 0.1, 1),\n  tea_brewed: makeProfile(1, 0, 0, 0, 0.2, 0, 0.1, 0, 3),\n  wine_red: makeProfile(85, 0, 0, 0, 2.6, 0, 0.6, 0.1, 4),\n  wine_white: makeProfile(82, 0, 0, 0, 2.6, 0, 0.6, 0.1, 5),\n  beer: makeProfile(43, 0, 0, 0, 3.6, 0, 0, 0.4, 4),\n  vodka: makeProfile(231, 0, 0, 0, 0, 0, 0, 0, 0),\n  rum: makeProfile(231, 0, 0, 0, 0, 0, 0, 0, 0),\n  whiskey: makeProfile(250, 0, 0, 0, 0, 0, 0, 0, 0),\n};\n\nexport const UNIT_TO_GRAMS: Record<string, number> = {\n  g: 1,\n  \"g.\": 1,\n  gram: 1,\n  grams: 1,\n  kg: 1000,\n  \"kg.\": 1000,\n  kilogram: 1000,\n  kilograms: 1000,\n  oz: 28.3495,\n  \"oz.\": 28.3495,\n  ounce: 28.3495,\n  ounces: 28.3495,\n  \"fluid ounce\": 29.5735,\n  \"fluid ounces\": 29.5735,\n  \"fl oz\": 29.5735,\n  \"fl.oz\": 29.5735,\n  floz: 29.5735,\n  lb: 453.592,\n  \"lb.\": 453.592,\n  lbs: 453.592,\n  \"lbs.\": 453.592,\n  pound: 453.592,\n  pounds: 453.592,\n  ml: 1,\n  \"ml.\": 1,\n  milliliter: 1,\n  milliliters: 1,\n  litre: 1000,\n  liter: 1000,\n  liters: 1000,\n  litres: 1000,\n  l: 1000,\n  \"l.\": 1000,\n  ltr: 1000,\n  dl: 100,\n  cl: 10,\n  tsp: 4.2,\n  teaspoon: 4.2,\n  teaspoons: 4.2,\n  \"tsp.\": 4.2,\n  tbsp: 14.3,\n  tablespoon: 14.3,\n  tablespoons: 14.3,\n  \"tbsp.\": 14.3,\n  tbl: 14.3,\n  tbls: 14.3,\n  cup: 240,\n  \"cup.\": 240,\n  cups: 240,\n  c: 240,\n  pt: 473.176,\n  \"pt.\": 473.176,\n  pint: 473.176,\n  pints: 473.176,\n  qt: 946.353,\n  \"qt.\": 946.353,\n  qts: 946.353,\n  quart: 946.353,\n  quarts: 946.353,\n  gal: 3785.41,\n  \"gal.\": 3785.41,\n  gallon: 3785.41,\n  gallons: 3785.41,\n  each: 0,\n  ea: 0,\n  \"ea.\": 0,\n  pkg: 0,\n  package: 0,\n  pack: 0,\n};\n\nexport const EACH_WEIGHT_G: Record<string, number> = {\n  egg_whole: 50,\n  egg_white: 30,\n  egg_yolk: 18,\n  potato_raw: 213,\n  potato_baked: 213,\n  sweet_potato: 200,\n  carrot: 61,\n  onion: 110,\n  garlic: 3,\n  shallot: 30,\n  tomato: 120,\n  bell_pepper: 120,\n  jalapeno: 14,\n  mushroom_white: 18,\n  mushroom_cremini: 20,\n  zucchini: 196,\n  cucumber: 300,\n  apple: 182,\n  pear: 178,\n  orange: 131,\n  lemon: 65,\n  lime: 67,\n  banana: 118,\n  avocado: 200,\n  peach: 150,\n  plum: 66,\n  apricot: 35,\n  strawberry: 12,\n  grape: 5,\n  shrimp: 12,\n  scallop: 35,\n  mussel: 24,\n  chicken_breast: 174,\n  chicken_thigh: 135,\n  chicken_wing: 80,\n  turkey_ground: 113,\n  beef_ground_90: 113,\n  beef_ground_80: 113,\n  beef_steak: 227,\n  pork_loin: 200,\n  salmon: 170,\n  cod: 170,\n  tofu_firm: 126,\n  bread_white: 28,\n  bread_whole_wheat: 28,\n  tortilla_flour: 45,\n  tortilla_corn: 28,\n  cookie: 12,\n  brownie: 40,\n};\n\nexport const DENSITY_CUP_G: Record<string, number> = {\n  flour_all_purpose: 120,\n  flour_bread: 127,\n  flour_cake: 118,\n  flour_almond: 96,\n  sugar_granulated: 200,\n  sugar_brown: 220,\n  sugar_powdered: 120,\n  honey: 340,\n  maple_syrup: 320,\n  corn_syrup: 328,\n  molasses: 340,\n  cocoa_powder: 85,\n  chocolate_dark: 170,\n  chocolate_milk: 154,\n  butter_unsalted: 227,\n  oil_olive: 218,\n  oil_canola: 218,\n  oil_vegetable: 218,\n  water: 240,\n  buttermilk: 245,\n  half_and_half: 240,\n  vinegar_white: 240,\n  vinegar_apple_cider: 240,\n  vinegar_rice: 240,\n  vinegar_balsamic: 264,\n  worcestershire_sauce: 252,\n  peanut_butter: 258,\n  almond: 143,\n  walnut: 100,\n  pecan: 108,\n  cashew: 137,\n  pistachio: 123,\n  peanut: 146,\n  sunflower_seed: 140,\n  chia_seed: 140,\n  flax_seed: 168,\n  oats_rolled: 90,\n  rice_white_cooked: 195,\n  rice_brown_cooked: 195,\n  quinoa_cooked: 170,\n  pasta_cooked: 140,\n  lentils_cooked: 198,\n  chickpeas_cooked: 240,\n  black_beans_cooked: 172,\n  kidney_beans_cooked: 177,\n  corn: 145,\n  peas: 145,\n  spinach: 30,\n  cilantro: 16,\n  parsley_fresh: 30,\n  dill_fresh: 24,\n  basil_fresh: 21,\n  mint_fresh: 24,\n  scallion: 100,\n  kale: 67,\n  broccoli: 91,\n  cauliflower: 107,\n  carrot: 128,\n  bell_pepper: 149,\n  tomato: 149,\n  cucumber: 133,\n  strawberry: 150,\n  blueberry: 148,\n  raspberry: 123,\n  raisin: 165,\n  cranberry_dried: 110,\n  date: 147,\n  coconut_shredded: 96,\n  coconut_milk: 226,\n  cornstarch: 128,\n  cocoa_powder_unsweet: 85,\n  tofu_firm: 260,\n  yogurt_plain: 245,\n  yogurt_greek_plain: 240,\n  sour_cream: 240,\n  creme_fraiche: 240,\n  mascarpone: 240,\n  ricotta_part_skim: 246,\n  hummus: 240,\n  salsa: 240,\n  guacamole: 240,\n  pesto: 240,\n};\n\nexport const STOP_WORDS = new Set([\n  \"fresh\",\n  \"large\",\n  \"small\",\n  \"medium\",\n  \"organic\",\n  \"free-range\",\n  \"free\",\n  \"range\",\n  \"skinless\",\n  \"boneless\",\n  \"trimmed\",\n  \"ground\",\n  \"minced\",\n  \"chopped\",\n  \"diced\",\n  \"sliced\",\n  \"peeled\",\n  \"grated\",\n  \"shredded\",\n  \"whole\",\n  \"raw\",\n  \"cooked\",\n  \"roasted\",\n  \"toasted\",\n  \"unsalted\",\n  \"salted\",\n  \"low\",\n  \"fat\",\n  \"reduced\",\n  \"sodium\",\n  \"light\",\n  \"packed\",\n  \"drained\",\n  \"rinsed\",\n  \"taste\",\n  \"plus\",\n  \"extra\",\n  \"virgin\",\n  \"double\",\n  \"heavy\",\n  \"dark\",\n  \"fine\",\n  \"granulated\",\n  \"coarse\",\n  \"powdered\",\n  \"confectioners\",\n  \"brown\",\n  \"white\",\n  \"red\",\n  \"yellow\",\n  \"green\",\n  \"black\",\n  \"skin-on\",\n  \"skin\",\n  \"on\",\n  \"seeded\",\n  \"seedless\",\n  \"baby\",\n  \"stalks\",\n  \"leaves\",\n  \"sprigs\",\n  \"bunch\",\n  \"bunches\",\n  \"fillet\",\n  \"fillets\",\n  \"loin\",\n  \"steak\",\n  \"cut\",\n  \"pieces\",\n  \"piece\",\n  \"half\",\n  \"halves\",\n  \"uncooked\",\n  \"thawed\",\n  \"frozen\",\n  \"split\",\n  \"with\",\n  \"without\",\n  \"shell\",\n  \"shells\",\n  \"heads\",\n  \"head\",\n  \"tail\",\n  \"tails\",\n  \"rib\",\n  \"ribs\",\n  \"sticks\",\n  \"stick\",\n  \"sheet\",\n  \"sheets\",\n  \"package\",\n  \"packages\",\n  \"bag\",\n  \"bags\",\n  \"can\",\n  \"cans\",\n  \"jar\",\n  \"jars\",\n  \"clove\",\n  \"cloves\",\n  \"brand\",\n  \"style\",\n  \"original\",\n  \"classic\",\n  \"premium\",\n  \"quality\",\n  \"grade\",\n  \"recipe\",\n  \"base\",\n  \"blend\",\n  \"prepared\",\n  \"instant\",\n  \"mix\",\n  \"unsweetened\",\n  \"sweetened\",\n  \"natural\",\n  \"house\",\n  \"signature\",\n]);\n\nexport const INGREDIENT_SYNONYMS: Array<[RegExp, string]> = [\n  [/\\ball[-\\s]?purpose flour\\b|\\bap flour\\b/i, \"flour_all_purpose\"],\n  [/\\bbread flour\\b/i, \"flour_bread\"],\n  [/\\bcake flour\\b/i, \"flour_cake\"],\n  [/\\balmond flour\\b/i, \"flour_almond\"],\n  [/\\bgranulated sugar\\b|\\bwhite sugar\\b|\\bsugar\\b/i, \"sugar_granulated\"],\n  [/\\bbrown sugar\\b/i, \"sugar_brown\"],\n  [/\\bpowdered sugar\\b|\\bconfectioners'? sugar\\b/i, \"sugar_powdered\"],\n  [/\\bhoney\\b/i, \"honey\"],\n  [/\\bmaple syrup\\b/i, \"maple_syrup\"],\n  [/\\bcorn syrup\\b|\\bglucose syrup\\b/i, \"corn_syrup\"],\n  [/\\bmolasses\\b/i, \"molasses\"],\n  [/\\bunsweetened cocoa powder\\b|\\bcocoa powder\\b\\b/i, \"cocoa_powder\"],\n  [/\\bdark chocolate\\b/i, \"chocolate_dark\"],\n  [/\\bmilk chocolate\\b/i, \"chocolate_milk\"],\n  [/\\bvanilla extract\\b/i, \"vanilla_extract\"],\n  [/\\bwater\\b|\\bice water\\b|\\bfiltered water\\b/i, \"water\"],\n  [/\\bunsalted butter\\b|\\bbutter\\b/i, \"butter_unsalted\"],\n  [/\\bmargarine\\b/i, \"margarine\"],\n  [/\\bextra virgin olive oil\\b|\\bolive oil\\b/i, \"oil_olive\"],\n  [/\\bavocado oil\\b/i, \"oil_avocado\"],\n  [/\\bcanola oil\\b/i, \"oil_canola\"],\n  [/\\bvegetable oil\\b|\\bneutral oil\\b/i, \"oil_vegetable\"],\n  [/\\bshortening\\b/i, \"shortening\"],\n  [/\\bwhole egg\\b|\\beggs?\\b/i, \"egg_whole\"],\n  [/\\begg whites?\\b/i, \"egg_white\"],\n  [/\\begg yolks?\\b/i, \"egg_yolk\"],\n  [/\\bwhole milk\\b|\\bmilk\\b/i, \"milk_whole\"],\n  [/\\b2% milk\\b|\\breduced fat milk\\b/i, \"milk_2_percent\"],\n  [/\\bskim milk\\b|\\bfat free milk\\b/i, \"milk_skim\"],\n  [/\\bbuttermilk\\b/i, \"buttermilk\"],\n  [/\\bhalf[-\\s]?and[-\\s]?half\\b/i, \"half_and_half\"],\n  [/\\bheavy cream\\b|\\bwhipping cream\\b/i, \"cream_heavy\"],\n  [/\\bplain yogurt\\b/i, \"yogurt_plain\"],\n  [/\\bsour cream\\b/i, \"sour_cream\"],\n  [/\\bcheddar cheese\\b/i, \"cheese_cheddar\"],\n  [/\\bmozzarella\\b/i, \"cheese_mozzarella\"],\n  [/\\bparmesan\\b/i, \"cheese_parmesan\"],\n  [/\\bcream cheese\\b/i, \"cheese_cream\"],\n  [/\\bgoat cheese\\b|\\bchèvre\\b/i, \"cheese_goat\"],\n  [/\\bbacon\\b/i, \"bacon\"],\n  [/\\bham\\b/i, \"ham\"],\n  [/\\bchicken breast\\b/i, \"chicken_breast\"],\n  [/\\bchicken thighs?\\b/i, \"chicken_thigh\"],\n  [/\\bchicken wings?\\b/i, \"chicken_wing\"],\n  [/\\bground turkey\\b/i, \"turkey_ground\"],\n  [/\\b90% lean ground beef\\b|\\bground beef\\b/i, \"beef_ground_90\"],\n  [/\\b80% lean ground beef\\b/i, \"beef_ground_80\"],\n  [/\\bbeef steaks?\\b|\\bstrip steak\\b|\\bribeye\\b|\\bsteak\\b/i, \"beef_steak\"],\n  [/\\bpork loin\\b|\\bcenter cut pork\\b/i, \"pork_loin\"],\n  [/\\bpork belly\\b/i, \"pork_belly\"],\n  [/\\bpork sausage\\b/i, \"sausage_pork\"],\n  [/\\blamb\\b/i, \"lamb\"],\n  [/\\bvenison\\b/i, \"venison\"],\n  [/\\bsalmon\\b/i, \"salmon\"],\n  [/\\btuna\\b/i, \"tuna\"],\n  [/\\bcod\\b/i, \"cod\"],\n  [/\\bshrimp\\b|\\bprawns?\\b/i, \"shrimp\"],\n  [/\\bscallops?\\b/i, \"scallop\"],\n  [/\\bmussels?\\b/i, \"mussel\"],\n  [/\\bfirm tofu\\b|\\btofu\\b/i, \"tofu_firm\"],\n  [/\\btempeh\\b/i, \"tempeh\"],\n  [/\\bseitan\\b/i, \"seitan\"],\n  [/\\blentils?\\b/i, \"lentils_cooked\"],\n  [/\\bchickpeas?\\b|\\bgarbanzo\\b/i, \"chickpeas_cooked\"],\n  [/\\bblack beans\\b/i, \"black_beans_cooked\"],\n  [/\\bkidney beans\\b/i, \"kidney_beans_cooked\"],\n  [/\\bwhite rice\\b/i, \"rice_white_cooked\"],\n  [/\\bbrown rice\\b/i, \"rice_brown_cooked\"],\n  [/\\bquinoa\\b/i, \"quinoa_cooked\"],\n  [/\\bcooked pasta\\b|\\bpasta\\b/i, \"pasta_cooked\"],\n  [/\\bwhite bread\\b/i, \"bread_white\"],\n  [/\\bwhole wheat bread\\b/i, \"bread_whole_wheat\"],\n  [/\\bflour tortillas?\\b/i, \"tortilla_flour\"],\n  [/\\bcorn tortillas?\\b/i, \"tortilla_corn\"],\n  [/\\bro lled oats\\b|\\boats?\\b/i, \"oats_rolled\"],\n  [/\\bgranola\\b/i, \"granola\"],\n  [/\\bbaked potato\\b/i, \"potato_baked\"],\n  [/\\bpotatoes?\\b/i, \"potato_raw\"],\n  [/\\bsweet potatoes?\\b|\\byam\\b/i, \"sweet_potato\"],\n  [/\\bcarrots?\\b/i, \"carrot\"],\n  [/\\bbeets?\\b/i, \"beet\"],\n  [/\\bcorn kernels?\\b|\\bcorn\\b/i, \"corn\"],\n  [/\\bpeas\\b/i, \"peas\"],\n  [/\\bbroccoli\\b/i, \"broccoli\"],\n  [/\\bcauliflower\\b/i, \"cauliflower\"],\n  [/\\bkale\\b/i, \"kale\"],\n  [/\\bspinach\\b/i, \"spinach\"],\n  [/\\bromaine\\b|\\blettuce\\b/i, \"lettuce_romaine\"],\n  [/\\bcabbage\\b/i, \"cabbage_green\"],\n  [/\\bonions?\\b/i, \"onion\"],\n  [/\\bgarlic\\b/i, \"garlic\"],\n  [/\\bshallots?\\b/i, \"shallot\"],\n  [/\\bleeks?\\b/i, \"leek\"],\n  [/\\bgreen onions?\\b|\\bscallions?\\b|\\bspring onions?\\b/i, \"scallion\"],\n  [/\\bcelery\\b/i, \"celery\"],\n  [/\\bcilantro\\b|\\bcoriander leaves?\\b/i, \"cilantro\"],\n  [/\\b(bell|sweet) peppers?\\b/i, \"bell_pepper\"],\n  [/\\bjalape(n|ñ)o\\b/i, \"jalapeno\"],\n  [/\\btomatoes?\\b/i, \"tomato\"],\n  [/\\bcucumbers?\\b/i, \"cucumber\"],\n  [/\\bzucchini\\b/i, \"zucchini\"],\n  [/\\beggplant\\b|\\baubergine\\b/i, \"eggplant\"],\n  [/\\bmushrooms?\\b|\\bcremini\\b|\\bportobello\\b/i, \"mushroom_white\"],\n  [/\\bavocado\\b/i, \"avocado\"],\n  [/\\bbananas?\\b/i, \"banana\"],\n  [/\\bapples?\\b/i, \"apple\"],\n  [/\\bpears?\\b/i, \"pear\"],\n  [/\\boranges?\\b/i, \"orange\"],\n  [/\\blem ons?\\b/i, \"lemon\"],\n  [/\\blimes?\\b/i, \"lime\"],\n  [/\\bpineapple\\b/i, \"pineapple\"],\n  [/\\bmango\\b/i, \"mango\"],\n  [/\\bstrawberries?\\b/i, \"strawberry\"],\n  [/\\bblueberries?\\b/i, \"blueberry\"],\n  [/\\braspberries?\\b/i, \"raspberry\"],\n  [/\\bgrapes?\\b/i, \"grape\"],\n  [/\\bwatermelon\\b/i, \"watermelon\"],\n  [/\\bdried cranberries?\\b/i, \"cranberry_dried\"],\n  [/\\braisins?\\b/i, \"raisin\"],\n  [/\\bdates?\\b/i, \"date\"],\n  [/\\bfigs?\\b/i, \"fig_dried\"],\n  [/\\bprunes?\\b/i, \"prune\"],\n  [/\\balmonds?\\b/i, \"almond\"],\n  [/\\bwalnuts?\\b/i, \"walnut\"],\n  [/\\bpecans?\\b/i, \"pecan\"],\n  [/\\bpistachios?\\b/i, \"pistachio\"],\n  [/\\bcashews?\\b/i, \"cashew\"],\n  [/\\bpeanuts?\\b/i, \"peanut\"],\n  [/\\bpeanut butter\\b/i, \"peanut_butter\"],\n  [/\\btahini\\b/i, \"tahini\"],\n  [/\\bsunflower seeds?\\b/i, \"sunflower_seed\"],\n  [/\\bchia seeds?\\b/i, \"chia_seed\"],\n  [/\\bflax seeds?\\b/i, \"flax_seed\"],\n  [/\\bpumpkin seeds?\\b|\\bpepitas\\b/i, \"pumpkin_seed\"],\n  [/\\bshredded coconut\\b/i, \"coconut_shredded\"],\n  [/\\bcoconut milk\\b/i, \"coconut_milk\"],\n  [/\\bcoconut water\\b/i, \"coconut_water\"],\n  [/\\bcoconut sugar\\b/i, \"sugar_coconut\"],\n  [/\\bsalt\\b|\\bsea salt\\b|\\bkosher salt\\b/i, \"salt\"],\n  [/\\bblack pepper\\b|\\bpepper\\b/i, \"pepper_black\"],\n  [/\\bcumin\\b/i, \"cumin_ground\"],\n  [/\\bcoriander\\b/i, \"coriander_ground\"],\n  [/\\bpaprika\\b/i, \"paprika\"],\n  [/\\bchili powder\\b/i, \"chili_powder\"],\n  [/\\bcayenne\\b/i, \"cayenne\"],\n  [/\\bgarlic powder\\b/i, \"garlic_powder\"],\n  [/\\bonion powder\\b/i, \"onion_powder\"],\n  [/\\bcinnamon\\b/i, \"cinnamon_ground\"],\n  [/\\bnutmeg\\b/i, \"nutmeg\"],\n  [/\\bginger\\b/i, \"ginger_ground\"],\n  [/\\bturmeric\\b/i, \"turmeric\"],\n  [/\\bcloves?\\b/i, \"clove\"],\n  [/\\bcardamom\\b/i, \"cardamom\"],\n  [/\\boregano\\b/i, \"oregano_dried\"],\n  [/\\bthyme\\b/i, \"thyme_dried\"],\n  [/\\brosemary\\b/i, \"rosemary_dried\"],\n  [/\\bdried basil\\b|\\bbasil flakes\\b/i, \"basil_dried\"],\n  [/\\bbasil\\b/i, \"basil_fresh\"],\n  [/\\bdried parsley\\b|\\bparsley flakes\\b/i, \"parsley_dried\"],\n  [/\\bparsley\\b/i, \"parsley_fresh\"],\n  [/\\bdried dill\\b|\\bdill weed\\b/i, \"dill_dried\"],\n  [/\\bdill\\b/i, \"dill_fresh\"],\n  [/\\bmint leaves?\\b|\\bpeppermint\\b|\\bspearmint\\b/i, \"mint_fresh\"],\n  [/\\bsoy sauce\\b/i, \"soy_sauce\"],\n  [/\\bdistilled vinegar\\b|\\bwhite vinegar\\b|\\bspirit vinegar\\b/i, \"vinegar_white\"],\n  [/\\bapple cider vinegar\\b|\\bacv\\b/i, \"vinegar_apple_cider\"],\n  [/\\brice (?:wine )?vinegar\\b/i, \"vinegar_rice\"],\n  [/\\bbalsamic vinegar\\b/i, \"vinegar_balsamic\"],\n  [/\\bworcestershire\\b/i, \"worcestershire_sauce\"],\n  [/\\bfish sauce\\b/i, \"fish_sauce\"],\n  [/\\bmiso\\b/i, \"miso\"],\n  [/\\bgochujang\\b/i, \"gochujang\"],\n  [/\\bketchup\\b/i, \"ketchup\"],\n  [/\\byellow mustard\\b|\\bmustard\\b/i, \"mustard_yellow\"],\n  [/\\bmayonnaise\\b|\\baioli\\b/i, \"mayonnaise\"],\n  [/\\bbbq sauce\\b/i, \"bbq_sauce\"],\n  [/\\bhot sauce\\b|\\bsriracha\\b/i, \"hot_sauce\"],\n  [/\\bvinaigrette\\b/i, \"vinaigrette\"],\n  [/\\bpesto\\b/i, \"pesto\"],\n  [/\\bhummus\\b/i, \"hummus\"],\n  [/\\bsalsa\\b/i, \"salsa\"],\n  [/\\bguacamole\\b/i, \"guacamole\"],\n  [/\\bgreek yogurt\\b/i, \"yogurt_greek_plain\"],\n  [/\\bricotta\\b/i, \"ricotta_part_skim\"],\n  [/\\bmascarpone\\b/i, \"mascarpone\"],\n  [/\\bcrème fraîche\\b|\\bcreme fraiche\\b/i, \"creme_fraiche\"],\n  [/\\bgelatin\\b/i, \"gelatin\"],\n  [/\\bpectin\\b/i, \"pectin\"],\n  [/\\bcornstarch\\b/i, \"cornstarch\"],\n  [/\\bbaking powder\\b/i, \"baking_powder\"],\n  [/\\bbaking soda\\b|\\bbicarbonate\\b/i, \"baking_soda\"],\n  [/\\byeast\\b/i, \"yeast_active_dry\"],\n  [/\\bespresso powder\\b|\\binstant coffee\\b/i, \"espresso_powder\"],\n  [/\\bcoffee\\b/i, \"coffee_brewed\"],\n  [/\\btea\\b/i, \"tea_brewed\"],\n  [/\\bred wine\\b/i, \"wine_red\"],\n  [/\\bwhite wine\\b/i, \"wine_white\"],\n  [/\\bbeer\\b/i, \"beer\"],\n  [/\\bvodka\\b/i, \"vodka\"],\n  [/\\brum\\b/i, \"rum\"],\n  [/\\bwhiskey\\b|\\bbourbon\\b/i, \"whiskey\"],\n];\n\nexport type NutritionMatch = {\n  key: string | null;\n  normalized: string;\n  confidence: number;\n};\n\nconst ALL_KEYS = Object.keys(NUTRITION_DATABASE);\n\nconst KEY_TOKEN_CACHE = new Map<string, string[]>();\nconst NON_ALPHANUMERIC = /[^a-z0-9\\s]/g;\n\nexport function normalizeIngredientForMatching(raw: string): string {\n  if (!raw) return \"\";\n  const ascii = raw\n    .normalize(\"NFKD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\");\n  return ascii\n    .toLowerCase()\n    .replace(/\\([^)]*\\)/g, \" \")\n    .replace(/[%®™]/g, \" \")\n    .replace(/[\\u2018\\u2019]/g, \"'\")\n    .replace(/\\bno\\.\\s*\\d+\\b/g, \" \")\n    .replace(/\\b\\d+%/g, \" \")\n    .replace(/\\d+\\s?(?:st|nd|rd|th)\\b/g, \" \")\n    .replace(/[-_/]/g, \" \")\n    .replace(/\\s+/g, \" \")\n    .trim();\n}\n\nexport function tokenizeIngredient(normalized: string): string[] {\n  if (!normalized) return [];\n  const cleaned = normalized.replace(NON_ALPHANUMERIC, \" \");\n  const tokens = cleaned\n    .split(/\\s+/)\n    .map((token) => token.trim())\n    .filter((token) => token && !STOP_WORDS.has(token));\n  return Array.from(new Set(tokens));\n}\n\nfunction getKeyTokens(key: string): string[] {\n  const cached = KEY_TOKEN_CACHE.get(key);\n  if (cached) return cached;\n  const tokens = key.split(/[_\\s]+/).filter(Boolean);\n  KEY_TOKEN_CACHE.set(key, tokens);\n  return tokens;\n}\n\ntype TokenMatch = { key: string; score: number; confidence: number };\n\nfunction findBestTokenMatch(tokens: string[]): TokenMatch | null {\n  if (!tokens.length) return null;\n  const uniqueTokens = Array.from(new Set(tokens));\n  let best: TokenMatch | null = null;\n  for (const key of ALL_KEYS) {\n    const keyTokens = getKeyTokens(key);\n    let directMatches = 0;\n    let partialMatches = 0;\n    for (const token of uniqueTokens) {\n      if (keyTokens.includes(token)) {\n        directMatches++;\n      } else if (\n        keyTokens.some(\n          (keyToken) => keyToken.startsWith(token) || token.startsWith(keyToken),\n        )\n      ) {\n        partialMatches++;\n      }\n    }\n    if (!directMatches && partialMatches <= 1) continue;\n    const coverage = keyTokens.length ? directMatches / keyTokens.length : 0;\n    const tokenCoverage = uniqueTokens.length ? directMatches / uniqueTokens.length : 0;\n    const score = directMatches * 2 + partialMatches * 0.6 + coverage + tokenCoverage;\n    if (!best || score > best.score) {\n      const confidenceBase =\n        0.45 + coverage * 0.3 + tokenCoverage * 0.3 + (directMatches > 1 ? 0.12 : 0);\n      best = {\n        key,\n        score,\n        confidence: Number(Math.min(0.98, confidenceBase).toFixed(3)),\n      };\n    }\n  }\n  if (best && best.score >= 1.4) {\n    return best;\n  }\n  return null;\n}\n\nexport function resolveIngredientKey(raw: string): NutritionMatch {\n  const normalized = normalizeIngredientForMatching(raw);\n  const textForRegex = normalized || raw.toLowerCase();\n  for (const [pattern, key] of INGREDIENT_SYNONYMS) {\n    if (pattern.test(textForRegex)) {\n      return { key, normalized: key, confidence: 1 };\n    }\n  }\n  const tokens = tokenizeIngredient(textForRegex);\n  if (tokens.length) {\n    const best = findBestTokenMatch(tokens);\n    if (best) {\n      return { key: best.key, normalized: best.key, confidence: best.confidence };\n    }\n  }\n  const fallbackToken = tokens[0] ?? (normalized || raw.trim().toLowerCase());\n  return { key: null, normalized: fallbackToken, confidence: 0 };\n}\n","import type { Request, Response } from \"express\";\nimport {\n  DENSITY_CUP_G,\n  EACH_WEIGHT_G,\n  INGREDIENT_SYNONYMS,\n  NUTRITION_DATABASE,\n  STOP_WORDS,\n  UNIT_TO_GRAMS,\n  resolveIngredientKey,\n  type NutritionProfile,\n} from \"../../shared/nutrition\";\n\nconst TBSP_PER_CUP = 16;\nconst TSP_PER_TBSP = 3;\n\nconst COOKING_FALLBACKS: Array<{ pattern: RegExp; yieldFactor: number }> = [\n  { pattern: /fried|grill|roast|bake|sear|broil/, yieldFactor: 0.88 },\n  { pattern: /poach|boil|simmer|stew|steam|blanch/, yieldFactor: 0.95 },\n  { pattern: /.*/, yieldFactor: 0.92 },\n];\n\nconst ZERO_MACROS = () => ({\n  calories: 0,\n  fat: 0,\n  saturatedFat: 0,\n  transFat: 0,\n  carbs: 0,\n  fiber: 0,\n  sugars: 0,\n  protein: 0,\n  sodium: 0,\n});\n\ntype MacroTotals = ReturnType<typeof ZERO_MACROS>;\n\ntype ParsedIngredient = {\n  quantity: number;\n  unit: string;\n  item: string;\n  prep: string;\n};\n\ntype BreakdownRow = {\n  original: string;\n  normalized: string;\n  matchKey: string | null;\n  confidence: number;\n  grams: number;\n  rawGrams: number;\n  yieldFactor: number;\n  macros: MacroTotals;\n};\n\ntype UnknownRow = {\n  original: string;\n  suggestion: string;\n};\n\nconst unicodeFractions: Record<string, string> = {\n  \"¼\": \"1/4\",\n  \"½\": \"1/2\",\n  \"¾\": \"3/4\",\n  \"⅐\": \"1/7\",\n  \"⅑\": \"1/9\",\n  \"⅒\": \"1/10\",\n  \"⅓\": \"1/3\",\n  \"⅔\": \"2/3\",\n  \"⅕\": \"1/5\",\n  \"⅖\": \"2/5\",\n  \"⅗\": \"3/5\",\n  \"⅘\": \"4/5\",\n  \"⅙\": \"1/6\",\n  \"⅚\": \"5/6\",\n  \"⅛\": \"1/8\",\n  \"⅜\": \"3/8\",\n  \"⅝\": \"5/8\",\n  \"⅞\": \"7/8\",\n};\n\nfunction parseIngredientLine(line: string): ParsedIngredient {\n  let text = line.trim().replace(/[¼½¾⅐⅑⅒⅓⅔⅕⅖⅗⅘⅙⅚⅛⅜⅝⅞]/g, (c) => unicodeFractions[c] ?? c);\n  text = text.replace(/(\\d)(\\s*)(\\d\\/\\d)/g, \"$1 $3\");\n  const match = text.match(\n    /^\\s*([0-9]+(?:\\.[0-9]+)?(?:\\s+[0-9]+\\/\\d+)?|[0-9]+\\/\\d+)\\s*([a-zA-Z\\.\\-]+)?\\s*(.*)$/, // quantity + optional unit + remainder\n  );\n  if (match) {\n    const [_, quantityRaw, unitRaw = \"\", remainder] = match;\n    let quantity = 0;\n    const parts = quantityRaw.split(\" \");\n    if (parts.length === 2 && /\\d+\\/\\d+/.test(parts[1])) {\n      const [whole, fraction] = parts;\n      const [num, denom] = fraction.split(\"/\").map(Number);\n      quantity = Number(whole) + (denom ? num / denom : 0);\n    } else if (/\\d+\\/\\d+/.test(quantityRaw)) {\n      const [num, denom] = quantityRaw.split(\"/\").map(Number);\n      quantity = denom ? num / denom : Number(quantityRaw);\n    } else {\n      quantity = Number(quantityRaw);\n    }\n\n    const unit = (unitRaw || \"\").toLowerCase();\n    let item = remainder.trim();\n    let prep = \"\";\n    const commaIndex = item.indexOf(\",\");\n    if (commaIndex >= 0) {\n      prep = item.slice(commaIndex + 1).trim().toLowerCase();\n      item = item.slice(0, commaIndex).trim();\n    }\n\n    const leadPrep = /^(chopped|diced|minced|sliced|grated|crushed|pureed|melted|softened|cubed|julienned|shredded|mashed)\\s+(.*)$/i;\n    const leadMatch = item.match(leadPrep);\n    if (leadMatch) {\n      prep = prep || leadMatch[1].toLowerCase();\n      item = leadMatch[2].trim();\n    }\n\n    return {\n      quantity,\n      unit: unit || (quantity > 0 ? \"each\" : unit),\n      item,\n      prep,\n    };\n  }\n\n  const parts = line.split(\",\");\n  if (parts.length > 1) {\n    return {\n      quantity: 1,\n      unit: \"each\",\n      item: parts[0]!.trim(),\n      prep: parts.slice(1).join(\",\").trim().toLowerCase(),\n    };\n  }\n\n  return {\n    quantity: 1,\n    unit: \"each\",\n    item: line.trim(),\n    prep: \"\",\n  };\n}\n\nconst ALIAS_ORDER = INGREDIENT_SYNONYMS.map(([, key]) => key);\n\nfunction estimateGrams(matchKey: string | null, unit: string, quantity: number): number {\n  const lowerUnit = unit.toLowerCase();\n  if (!Number.isFinite(quantity) || quantity <= 0) return 0;\n\n  const direct = UNIT_TO_GRAMS[lowerUnit as keyof typeof UNIT_TO_GRAMS];\n  if (direct && direct > 0) {\n    return quantity * direct;\n  }\n\n  if (matchKey) {\n    if ((lowerUnit === \"cup\" || lowerUnit === \"cups\") && DENSITY_CUP_G[matchKey]) {\n      return quantity * DENSITY_CUP_G[matchKey];\n    }\n    if (\n      (lowerUnit === \"tbsp\" || lowerUnit === \"tablespoon\" || lowerUnit === \"tablespoons\" || lowerUnit === \"tbsp.\") &&\n      DENSITY_CUP_G[matchKey]\n    ) {\n      return quantity * (DENSITY_CUP_G[matchKey] / TBSP_PER_CUP);\n    }\n    if (\n      (lowerUnit === \"tsp\" || lowerUnit === \"teaspoon\" || lowerUnit === \"teaspoons\" || lowerUnit === \"tsp.\") &&\n      DENSITY_CUP_G[matchKey]\n    ) {\n      return quantity * (DENSITY_CUP_G[matchKey] / (TBSP_PER_CUP * TSP_PER_TBSP));\n    }\n    if ((lowerUnit === \"each\" || lowerUnit === \"ea\") && EACH_WEIGHT_G[matchKey]) {\n      return quantity * EACH_WEIGHT_G[matchKey];\n    }\n  }\n\n  if (lowerUnit === \"each\" || lowerUnit === \"ea\") {\n    return quantity * 30; // generic single unit fallback\n  }\n\n  if (lowerUnit === \"pinch\" || lowerUnit === \"dash\") {\n    return quantity * 0.5;\n  }\n\n  if (lowerUnit === \"sprig\" || lowerUnit === \"sprigs\") {\n    return quantity * 2;\n  }\n\n  if (lowerUnit === \"bunch\" || lowerUnit === \"bunches\") {\n    return quantity * 85;\n  }\n\n  return quantity * 28.3495; // fallback to 1oz equivalent\n}\n\nfunction multiplyProfile(profile: NutritionProfile, grams: number): MacroTotals {\n  const factor = grams / 100;\n  return {\n    calories: profile.calories * factor,\n    fat: profile.fat * factor,\n    saturatedFat: profile.saturatedFat * factor,\n    transFat: profile.transFat * factor,\n    carbs: profile.carbs * factor,\n    fiber: profile.fiber * factor,\n    sugars: profile.sugars * factor,\n    protein: profile.protein * factor,\n    sodium: profile.sodium * factor,\n  };\n}\n\nfunction addTotals(target: MacroTotals, delta: MacroTotals) {\n  target.calories += delta.calories;\n  target.fat += delta.fat;\n  target.saturatedFat += delta.saturatedFat;\n  target.transFat += delta.transFat;\n  target.carbs += delta.carbs;\n  target.fiber += delta.fiber;\n  target.sugars += delta.sugars;\n  target.protein += delta.protein;\n  target.sodium += delta.sodium;\n}\n\nfunction scaleTotals(source: MacroTotals, factor: number): MacroTotals {\n  if (!Number.isFinite(factor) || factor <= 0) return ZERO_MACROS();\n  return {\n    calories: source.calories * factor,\n    fat: source.fat * factor,\n    saturatedFat: source.saturatedFat * factor,\n    transFat: source.transFat * factor,\n    carbs: source.carbs * factor,\n    fiber: source.fiber * factor,\n    sugars: source.sugars * factor,\n    protein: source.protein * factor,\n    sodium: source.sodium * factor,\n  };\n}\n\nfunction roundTotals(source: MacroTotals): MacroTotals {\n  return {\n    calories: Math.round(source.calories),\n    fat: Number(source.fat.toFixed(2)),\n    saturatedFat: Number(source.saturatedFat.toFixed(2)),\n    transFat: Number(source.transFat.toFixed(2)),\n    carbs: Number(source.carbs.toFixed(2)),\n    fiber: Number(source.fiber.toFixed(2)),\n    sugars: Number(source.sugars.toFixed(2)),\n    protein: Number(source.protein.toFixed(2)),\n    sodium: Math.round(source.sodium),\n  };\n}\n\nfunction computeYieldFactor(index: number, providedYields: (number | null)[], ingredientKey: string | null, fallback: number): number {\n  const provided = providedYields[index];\n  if (typeof provided === \"number\" && Number.isFinite(provided) && provided >= 0) {\n    return Math.max(0, Math.min(1, provided / 100));\n  }\n  if (ingredientKey && /salt|spice|pepper|powder/.test(ingredientKey)) {\n    return 1;\n  }\n  return fallback;\n}\n\nfunction inferFallbackYield(prepText: string): number {\n  const normalized = prepText.toLowerCase();\n  for (const entry of COOKING_FALLBACKS) {\n    if (entry.pattern.test(normalized)) return entry.yieldFactor;\n  }\n  return 0.92;\n}\n\nexport async function handleNutritionAnalyze(req: Request, res: Response) {\n  try {\n    const {\n      ingr,\n      yields = [],\n      yieldQty = 1,\n      yieldUnit = \"SERVING\",\n      prepMethod = \"\",\n    } = req.body as {\n      ingr: string[];\n      yields?: (number | null)[];\n      yieldQty?: number;\n      yieldUnit?: string;\n      prepMethod?: string;\n    };\n\n    if (!Array.isArray(ingr) || !ingr.length) {\n      return res.status(400).json({ error: \"No ingredients provided\" });\n    }\n\n    const fallbackYield = inferFallbackYield(prepMethod || \"\");\n\n    const totals = ZERO_MACROS();\n    let totalWeight = 0;\n    let matchedWeight = 0;\n    const breakdown: BreakdownRow[] = [];\n    const unknown: UnknownRow[] = [];\n\n    for (let index = 0; index < ingr.length; index++) {\n      const original = ingr[index] ?? \"\";\n      const parsed = parseIngredientLine(original);\n      const match = resolveIngredientKey(parsed.item);\n      const matchKey = match.key;\n      let gramsRaw = estimateGrams(matchKey, parsed.unit, parsed.quantity);\n      const yieldFactor = computeYieldFactor(index, yields, matchKey, fallbackYield);\n      const grams = gramsRaw * yieldFactor;\n      totalWeight += grams;\n\n      if (matchKey && NUTRITION_DATABASE[matchKey]) {\n        matchedWeight += grams;\n        const macros = multiplyProfile(NUTRITION_DATABASE[matchKey], grams);\n        addTotals(totals, macros);\n        breakdown.push({\n          original,\n          normalized: matchKey,\n          matchKey,\n          confidence: match.confidence,\n          grams,\n          rawGrams: gramsRaw,\n          yieldFactor,\n          macros: roundTotals(macros),\n        });\n      } else {\n        breakdown.push({\n          original,\n          normalized: match.normalized,\n          matchKey: null,\n          confidence: match.confidence,\n          grams,\n          rawGrams: gramsRaw,\n          yieldFactor,\n          macros: ZERO_MACROS(),\n        });\n        unknown.push({\n          original,\n          suggestion: suggestClosestMatch(match.normalized),\n        });\n      }\n    }\n\n    const servings = Number.isFinite(yieldQty) && yieldQty > 0 ? yieldQty : 1;\n    const perServing = scaleTotals(totals, 1 / servings);\n    const per100g = totalWeight > 0 ? scaleTotals(totals, 100 / totalWeight) : ZERO_MACROS();\n\n    const totalNutrients = {\n      ENERC_KCAL: {\n        label: \"Energy\",\n        quantity: totals.calories,\n        unit: \"kcal\",\n      },\n      FAT: {\n        label: \"Total Fat\",\n        quantity: totals.fat,\n        unit: \"g\",\n      },\n      FASAT: {\n        label: \"Saturated Fat\",\n        quantity: totals.saturatedFat,\n        unit: \"g\",\n      },\n      FATRN: {\n        label: \"Trans Fat\",\n        quantity: totals.transFat,\n        unit: \"g\",\n      },\n      CHOCDF: {\n        label: \"Total Carbohydrate\",\n        quantity: totals.carbs,\n        unit: \"g\",\n      },\n      FIBTG: {\n        label: \"Dietary Fiber\",\n        quantity: totals.fiber,\n        unit: \"g\",\n      },\n      SUGAR: {\n        label: \"Sugars\",\n        quantity: totals.sugars,\n        unit: \"g\",\n      },\n      PROCNT: {\n        label: \"Protein\",\n        quantity: totals.protein,\n        unit: \"g\",\n      },\n      NA: {\n        label: \"Sodium\",\n        quantity: totals.sodium,\n        unit: \"mg\",\n      },\n    };\n\n    const response = {\n      calories: Math.round(totals.calories),\n      totals: roundTotals(totals),\n      perServing: roundTotals(perServing),\n      per100g: roundTotals(per100g),\n      totalNutrients,\n      totalWeight,\n      matchedWeight,\n      coverage: totalWeight > 0 ? matchedWeight / totalWeight : 0,\n      yieldQty: servings,\n      yieldUnit,\n      breakdown,\n      unknown,\n    };\n\n    res.json(response);\n  } catch (error: any) {\n    res.status(500).json({ error: error?.message || \"Nutrition analysis failed\" });\n  }\n}\n\nfunction suggestClosestMatch(normalized: string): string {\n  if (!normalized) return \"\";\n  const tokens = normalized\n    .split(/\\s+/)\n    .map((token) => token.trim())\n    .filter((token) => token && !STOP_WORDS.has(token));\n  for (const token of tokens) {\n    const aliasIndex = ALIAS_ORDER.findIndex((key) => key.includes(token));\n    if (aliasIndex >= 0) return ALIAS_ORDER[aliasIndex] || \"\";\n  }\n  return tokens[0] || normalized;\n}\n","import type { Request, Response } from \"express\";\n\nfunction decodeHtml(s: string) {\n  return s\n    .replace(/&quot;/g, '\"')\n    .replace(/&#39;/g, \"'\")\n    .replace(/&amp;/g, \"&\")\n    .replace(/&lt;/g, \"<\")\n    .replace(/&gt;/g, \">\");\n}\n\nfunction toAbsoluteUrl(possiblyRelative: string, base: string) {\n  try {\n    return new URL(possiblyRelative, base).toString();\n  } catch {\n    return possiblyRelative;\n  }\n}\n\nfunction normalizeImageField(img: any): string | null {\n  if (!img) return null;\n  if (typeof img === \"string\") return img;\n  if (Array.isArray(img)) return normalizeImageField(img[0]);\n  if (typeof img === \"object\") {\n    if (typeof img.url === \"string\") return img.url;\n    if (typeof img.contentUrl === \"string\") return img.contentUrl;\n  }\n  return null;\n}\n\nfunction parseJsonLdRecipe(html: string) {\n  const scripts = Array.from(\n    html.matchAll(\n      /<script[^>]+type=[\"']application\\/ld\\+json[\"'][^>]*>([\\s\\S]*?)<\\/script>/gi,\n    ),\n  );\n  const safeArray = (v: any) => (Array.isArray(v) ? v : v ? [v] : []);\n  for (const m of scripts) {\n    try {\n      const raw = m[1].trim();\n      const data = JSON.parse(raw);\n      const list = Array.isArray(data) ? data : [data];\n      for (const entry of list) {\n        if (!entry) continue;\n        const graphArr = safeArray(entry[\"@graph\"]);\n        const lookupById: Record<string, any> = {};\n        for (const g of graphArr)\n          if (g && typeof g === \"object\" && typeof g[\"@id\"] === \"string\")\n            lookupById[g[\"@id\"]] = g;\n        const candidates = graphArr.length ? graphArr : [entry];\n        for (const cand of candidates) {\n          const type = safeArray(cand[\"@type\"]);\n          if (type.includes(\"Recipe\")) {\n            const isoToHuman = (iso: string) => {\n              if (!iso || typeof iso !== \"string\") return \"\";\n              const m = iso.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?/i);\n              if (!m) return String(iso);\n              const h = Number(m[1] || 0),\n                min = Number(m[2] || 0);\n              return h ? `${h}:${String(min).padStart(2, \"0\")}` : `${min}m`;\n            };\n            const normalizeInstructions = (ri: any): string => {\n              const arr = safeArray(ri);\n              const out: string[] = [];\n              for (const step of arr) {\n                if (typeof step === \"string\") out.push(step);\n                else if (step && typeof step.text === \"string\")\n                  out.push(step.text);\n                else if (step && Array.isArray(step.itemListElement)) {\n                  for (const el of step.itemListElement) {\n                    if (typeof el === \"string\") out.push(el);\n                    else if (el && typeof el.text === \"string\")\n                      out.push(el.text);\n                  }\n                }\n              }\n              return out.join(\"\\n\");\n            };\n            const nutrition = cand.nutrition\n              ? {\n                  calories: String(cand.nutrition.calories || \"\"),\n                  fat: String(cand.nutrition.fatContent || \"\"),\n                  carbs: String(cand.nutrition.carbohydrateContent || \"\"),\n                  protein: String(cand.nutrition.proteinContent || \"\"),\n                  servingSize: String(cand.nutrition.servingSize || \"\"),\n                }\n              : undefined;\n            let image = normalizeImageField(cand.image);\n            if (\n              !image &&\n              cand.image &&\n              typeof cand.image === \"object\" &&\n              typeof cand.image[\"@id\"] === \"string\"\n            ) {\n              const ref = lookupById[cand.image[\"@id\"]];\n              image = normalizeImageField(ref);\n            }\n            return {\n              title: decodeHtml(String(cand.name || \"\")),\n              ingredients: safeArray(cand.recipeIngredient || []).map(\n                (x: any) => decodeHtml(String(x)),\n              ),\n              instructions: decodeHtml(\n                normalizeInstructions(cand.recipeInstructions).trim(),\n              ),\n              yield: decodeHtml(String(cand.recipeYield || \"\")),\n              cookTime: isoToHuman(\n                String(cand.cookTime || cand.totalTime || \"\"),\n              ),\n              prepTime: isoToHuman(String(cand.prepTime || \"\")),\n              image,\n              nutrition,\n            };\n          }\n        }\n      }\n    } catch {\n      /* ignore */\n    }\n  }\n  return null;\n}\n\nfunction scrapeRecipeFallback(html: string) {\n  const pick = (re: RegExp) => (html.match(re)?.[1] || \"\").trim();\n  const title =\n    decodeHtml(pick(/<title[^>]*>([\\s\\S]*?)<\\/title>/i)) ||\n    decodeHtml(pick(/<h1[^>]*>([\\s\\S]*?)<\\/h1>/i));\n  const ogImage =\n    pick(\n      /<meta[^>]+property=[\"']og:image:secure_url[\"'][^>]+content=[\"']([^\"']+)[\"'][^>]*>/i,\n    ) ||\n    pick(\n      /<meta[^>]+property=[\"']og:image[\"'][^>]+content=[\"']([^\"']+)[\"'][^>]*>/i,\n    ) ||\n    pick(\n      /<meta[^>]+name=[\"']twitter:image[\"'][^>]+content=[\"']([^\"']+)[\"'][^>]*>/i,\n    ) ||\n    pick(/<link[^>]+rel=[\"']image_src[\"'][^>]+href=[\"']([^\"']+)[\"'][^>]*>/i) ||\n    pick(/<meta[^>]+name=[\"']image[\"'][^>]+content=[\"']([^\"']+)[\"'][^>]*>/i);\n\n  const section = (label: RegExp) => {\n    const h = html.match(\n      new RegExp(`<h[1-6][^>]*>\\\\s*${label.source}[\\\\s\\\\S]*?<\\\\/h[1-6]>`, \"i\"),\n    );\n    if (!h) return \"\";\n    const idx = h.index! + h[0].length;\n    const tail = html.slice(idx);\n    const next = tail.search(/<h[1-6][^>]*>/i);\n    return next >= 0 ? tail.slice(0, next) : tail;\n  };\n\n  const extractList = (frag: string) => {\n    const lis = Array.from(frag.matchAll(/<li[^>]*>([\\s\\S]*?)<\\/li>/gi))\n      .map((m) => decodeHtml(m[1].replace(/<[^>]+>/g, \"\").trim()))\n      .filter(Boolean);\n    if (lis.length) return lis;\n    const ps = Array.from(frag.matchAll(/<p[^>]*>([\\s\\S]*?)<\\/p>/gi))\n      .map((m) => decodeHtml(m[1].replace(/<[^>]+>/g, \"\").trim()))\n      .filter(Boolean);\n    return ps;\n  };\n\n  const ingFrag = section(/ingredients?/i);\n  const insFrag = section(/(instructions|directions|method|steps)/i);\n  const ingredients = extractList(ingFrag);\n  const instructions = extractList(insFrag);\n\n  const yieldText = pick(/<[^>]*>(?:yield|servings?)\\s*:?\\s*([^<]{1,40})<\\//i);\n\n  if (!title && ingredients.length === 0 && instructions.length === 0)\n    return null;\n  return {\n    title,\n    ingredients,\n    instructions: instructions.join(\"\\n\"),\n    yield: yieldText,\n    image: ogImage,\n  };\n}\n\nexport async function handleRecipeImport(req: Request, res: Response) {\n  try {\n    const { url } = req.body as { url: string };\n    if (!url || !/^https?:\\/\\//i.test(url))\n      return res.status(400).json({ error: \"Invalid url\" });\n\n    const r = await fetch(url, {\n      headers: { \"user-agent\": \"Mozilla/5.0 RecipeStudioBot\" },\n    });\n    if (!r.ok)\n      return res.status(400).json({ error: `Fetch failed (${r.status})` });\n    const html = await r.text();\n\n    const rec = parseJsonLdRecipe(html) || scrapeRecipeFallback(html);\n    if (!rec) return res.status(404).json({ error: \"No recipe found on page\" });\n\n    if ((rec as any).image) {\n      (rec as any).image = toAbsoluteUrl(String((rec as any).image), url);\n    }\n\n    res.json(rec);\n  } catch (e: any) {\n    res.status(500).json({ error: e?.message || \"Import failed\" });\n  }\n}\n","import type { Request, Response } from \"express\";\n\nexport async function proxyRecipeImage(req: Request, res: Response) {\n  try {\n    const src = String((req.query.url as string) || \"\");\n    if (!src || !/^https?:\\/\\//i.test(src)) {\n      return res.status(400).json({ error: \"Invalid image url\" });\n    }\n    const r = await fetch(src, {\n      headers: { Accept: \"image/*,application/octet-stream\" },\n    });\n    if (!r.ok) {\n      return res\n        .status(400)\n        .json({ error: `Image fetch failed (${r.status})` });\n    }\n    const ct = r.headers.get(\"content-type\") || \"application/octet-stream\";\n    if (!/^image\\//i.test(ct)) {\n      return res.status(415).json({ error: \"Not an image\" });\n    }\n    const ab = await r.arrayBuffer();\n    res.setHeader(\"content-type\", ct);\n    res.setHeader(\"cache-control\", \"public, max-age=31536000, immutable\");\n    res.end(Buffer.from(ab));\n  } catch (e: any) {\n    res.status(500).json({ error: e?.message || \"Proxy failed\" });\n  }\n}\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { githubRaw, githubZip } from \"./routes/github\";\nimport { handleNutritionAnalyze } from \"./routes/nutrition\";\nimport { handleRecipeImport } from \"./routes/recipe\";\nimport { proxyRecipeImage } from \"./routes/recipeImage\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // GitHub proxy endpoints to import recipes from repos (CORS-safe)\n  app.get(\"/api/github/raw\", githubRaw);\n  app.get(\"/api/github/zip\", githubZip);\n\n  // Nutrition + Import\n  app.post(\"/api/nutrition/analyze\", handleNutritionAnalyze);\n  app.post(\"/api/recipe/import\", handleRecipeImport);\n  app.get(\"/api/recipe/image\", proxyRecipeImage);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["path","parts","m","app","express"],"mappings":"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"}