import React, { useState, useCallback } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Download, Printer } from "lucide-react";

export interface ProductionSheetItem {
  id: string;
  name: string;
  quantity: number;
  unit: string;
  components: string[];
  notes?: string;
  startTime?: string;
  dueTime?: string;
  assignee?: string;
}

export interface ProductionSheetGeneratorProps {
  date: string;
  service: string;
  items: ProductionSheetItem[];
  organizationName?: string;
  instructions?: string;
}

export const ProductionSheetGenerator: React.FC<ProductionSheetGeneratorProps> = ({
  date,
  service,
  items,
  organizationName = "Restaurant/Bakery",
  instructions,
}) => {
  const generatePDF = useCallback(async () => {
    const { jsPDF } = await import("jspdf");
    const doc = new jsPDF();
    let yPosition = 20;
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 15;
    const contentWidth = pageWidth - 2 * margin;

    // Header
    doc.setFontSize(18);
    doc.text("PRODUCTION SHEET", pageWidth / 2, yPosition, { align: "center" });
    yPosition += 10;

    doc.setFontSize(11);
    doc.text(`${organizationName}`, pageWidth / 2, yPosition, { align: "center" });
    yPosition += 6;

    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text(`Date: ${new Date(date).toLocaleDateString()}`, margin, yPosition);
    doc.text(`Service: ${service}`, pageWidth / 2, yPosition);
    yPosition += 8;

    // Instructions if provided
    if (instructions) {
      doc.setTextColor(0);
      doc.setFontSize(9);
      doc.text("NOTES:", margin, yPosition);
      yPosition += 4;
      doc.setTextColor(60);
      doc.setFontSize(8);
      const splitNotes = doc.splitTextToSize(instructions, contentWidth);
      doc.text(splitNotes, margin, yPosition);
      yPosition += splitNotes.length * 3 + 4;
    }

    // Reset text color
    doc.setTextColor(0);
    doc.setFontSize(10);
    yPosition += 4;

    // Items table
    const colWidth = contentWidth / 4;

    // Table header
    doc.setFillColor(240, 240, 240);
    doc.rect(margin, yPosition, contentWidth, 8, "F");
    doc.setFontSize(9);
    doc.setFont(undefined, "bold");
    doc.text("Item", margin + 2, yPosition + 6);
    doc.text("Qty", margin + colWidth + 2, yPosition + 6);
    doc.text("Components", margin + colWidth * 2 + 2, yPosition + 6);
    doc.text("Notes", margin + colWidth * 3 + 2, yPosition + 6);
    yPosition += 10;

    // Table rows
    doc.setFont(undefined, "normal");
    doc.setFontSize(8);

    items.forEach((item) => {
      const itemName = item.name;
      const itemQty = `${item.quantity} ${item.unit}`;
      const componentsText = item.components.join(", ");
      const notesText = item.notes || "";

      // Split long text
      const nameLines = doc.splitTextToSize(itemName, colWidth - 4);
      const componentLines = doc.splitTextToSize(componentsText, colWidth - 4);
      const notesLines = doc.splitTextToSize(notesText, colWidth - 4);

      const rowHeight = Math.max(nameLines.length, componentLines.length, notesLines.length) * 3 + 4;

      // Check page break
      if (yPosition + rowHeight > pageHeight - 10) {
        doc.addPage();
        yPosition = 20;
      }

      // Draw row background alternating
      const pageIndex = doc.getNumberOfPages();
      if (pageIndex % 2 === 0) {
        doc.setFillColor(250, 250, 250);
        doc.rect(margin, yPosition, contentWidth, rowHeight, "F");
      }

      // Draw borders
      doc.setDrawColor(200);
      doc.rect(margin, yPosition, contentWidth, rowHeight);
      doc.line(margin + colWidth, yPosition, margin + colWidth, yPosition + rowHeight);
      doc.line(margin + colWidth * 2, yPosition, margin + colWidth * 2, yPosition + rowHeight);
      doc.line(margin + colWidth * 3, yPosition, margin + colWidth * 3, yPosition + rowHeight);

      // Draw text
      doc.setTextColor(0);
      doc.text(nameLines, margin + 2, yPosition + 3);
      doc.text(itemQty, margin + colWidth + 2, yPosition + 3);
      doc.text(componentLines, margin + colWidth * 2 + 2, yPosition + 3);
      doc.text(notesLines, margin + colWidth * 3 + 2, yPosition + 3);

      yPosition += rowHeight;
    });

    // Footer
    yPosition += 10;
    doc.setFontSize(8);
    doc.setTextColor(150);
    doc.text("Generated by Echo Recipe Pro", pageWidth / 2, pageHeight - 10, { align: "center" });

    return doc;
  }, [date, service, items, organizationName, instructions]);

  const handleDownloadPDF = useCallback(async () => {
    const doc = await generatePDF();
    doc.save(`production-sheet-${date}.pdf`);
  }, [generatePDF, date]);

  const handlePrint = useCallback(() => {
    const doc = generatePDF();
    const pdfString = doc.output("dataurlstring");
    const printWindow = window.open(pdfString);
    if (printWindow) {
      printWindow.print();
    }
  }, [generatePDF]);

  return (
    <Card>
      <CardHeader>
        <CardTitle>Production Sheet</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Preview */}
        <div className="bg-white dark:bg-slate-950 border rounded p-6 space-y-3 max-h-96 overflow-y-auto">
          <div className="text-center space-y-1">
            <h3 className="text-lg font-bold">PRODUCTION SHEET</h3>
            <p className="text-sm">{organizationName}</p>
            <p className="text-xs text-muted-foreground">
              {new Date(date).toLocaleDateString()} â€¢ {service}
            </p>
          </div>

          {instructions && (
            <div className="bg-blue-50 dark:bg-blue-950/20 p-2 rounded text-xs">
              <p className="font-semibold text-blue-900 dark:text-blue-300">Notes:</p>
              <p className="text-blue-800 dark:text-blue-200 whitespace-pre-line">{instructions}</p>
            </div>
          )}

          <table className="w-full text-xs border-collapse">
            <thead>
              <tr className="border-b-2 border-gray-400">
                <th className="text-left py-1">Item</th>
                <th className="text-left py-1">Qty</th>
                <th className="text-left py-1">Components</th>
                <th className="text-left py-1">Notes</th>
              </tr>
            </thead>
            <tbody>
              {items.map((item, idx) => (
                <tr key={item.id} className="border-b border-gray-200 hover:bg-gray-50 dark:hover:bg-slate-900">
                  <td className="py-1">{item.name}</td>
                  <td className="py-1">{item.quantity} {item.unit}</td>
                  <td className="py-1 text-xs text-gray-600 dark:text-gray-400">
                    {item.components.join(", ")}
                  </td>
                  <td className="py-1 text-xs text-gray-600 dark:text-gray-400">{item.notes}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Action Buttons */}
        <div className="flex gap-3">
          <Button onClick={handleDownloadPDF} className="flex-1 gap-2">
            <Download className="h-4 w-4" />
            Download PDF
          </Button>
          <Button variant="outline" onClick={handlePrint} className="flex-1 gap-2">
            <Printer className="h-4 w-4" />
            Print
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default ProductionSheetGenerator;
