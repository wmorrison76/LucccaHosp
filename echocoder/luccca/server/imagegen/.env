# replace REPLACE_ME with your Stability API key, save & exit
cd ~/Desktop/LUCCCA/frontend

# --- Safety backup
mkdir -p backups/imagegen
tar -czf backups/imagegen/$(date +"%Y%m%d-%H%M%S").tar.gz \
  src/modules/CustomCakeStudio/engine/imagegen package.json 2>/dev/null || true
echo "Backup saved."

# --- ImageGen client (pure TS, no JSX)
mkdir -p src/modules/CustomCakeStudio/engine/imagegen
cat > src/modules/CustomCakeStudio/engine/imagegen/ImageGenClient.ts <<'TS'
// Headless image-gen client. Posts GenPayload to VITE_IMG_API_URL (or preview fallback).
export type GenPayload = {
  prompt: string;
  negative?: string;
  width?: number;
  height?: number;
  seed?: number;
  referenceDataURL?: string;
  maskDataURL?: string;
  mode?: "fast" | "balanced" | "quality";
};

const API_URL =
  (import.meta as any).env?.VITE_IMG_API_URL ||
  (import.meta as any).env?.VITE_IMG_APIURL || "";

export async function generate(p: GenPayload): Promise<{ url?: string; base64?: string; blob?: Blob }> {
  const url = API_URL || "/__preview/txt2img";
  const res = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(p),
  });

  if (!res.ok) {
    const text = await res.text().catch(() => "");
    throw new Error(`Image API ${res.status}: ${text || res.statusText}`);
  }

  const ct = res.headers.get("content-type") || "";
  if (ct.startsWith("application/json")) {
    const data = await res.json();
    if (data?.url) return { url: data.url };
    if (data?.base64) return { base64: data.base64, url: `data:image/png;base64,${data.base64}` };
    throw new Error("Invalid JSON response from Image API.");
  }
  if (ct.startsWith("image/")) {
    const blob = await res.blob();
    return { blob, url: URL.createObjectURL(blob) };
  }

  const text = await res.text().catch(() => "");
  throw new Error(`Unexpected content-type: ${ct} ${text}`);
}

export default { generate };
TS

# --- Tiny Node server (Stability SD3 txt2img)
mkdir -p server/imagegen
cat > server/imagegen/server.js <<'JS'
const express = require("express");
const path = require("path");
const dotenv = require("dotenv");
dotenv.config({ path: path.join(__dirname, ".env") });

const PORT = process.env.PORT || 8787;
const STABILITY_KEY = process.env.STABILITY_API_KEY;

const app = express();

app.use((req, res, next) => {
  res.setHeader("Access-Control-Allow-Origin", "http://localhost:5173");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  if (req.method === "OPTIONS") return res.sendStatus(200);
  next();
});

app.use(express.json({ limit: "25mb" }));

function stepsForMode(mode) {
  if (mode === "fast") return 20;
  if (mode === "quality") return 40;
  return 28;
}

app.post("/api/txt2img", async (req, res) => {
  try {
    if (!STABILITY_KEY) {
      return res.status(500).json({
        error: "Missing STABILITY_API_KEY. Edit server/imagegen/.env and restart.",
      });
    }
    const { prompt, negative, width = 768, height = 768, seed, mode } = req.body || {};
    if (!prompt || typeof prompt !== "string") {
      return res.status(400).json({ error: "Missing prompt" });
    }

    const form = new FormData();
    form.append("prompt", prompt);
    if (negative) form.append("negative_prompt", negative);
    form.append("width", String(width));
    form.append("height", String(height));
    form.append("output_format", "png");
    if (seed !== undefined) form.append("seed", String(seed));
    form.append("steps", String(stepsForMode(mode)));

    const r = await fetch("https://api.stability.ai/v2beta/stable-image/generate/sd3", {
      method: "POST",
      headers: { Authorization: `Bearer ${STABILITY_KEY}` },
      body: form,
    });

    if (!r.ok) {
      const t = await r.text().catch(() => "");
      return res.status(r.status).send(t || r.statusText);
    }

    const buf = Buffer.from(await r.arrayBuffer());
    res.setHeader("Content-Type", "image/png");
    res.send(buf);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: String(err && err.message ? err.message : err) });
  }
});

app.listen(PORT, () => {
  console.log(`✓ Image server listening on http://localhost:${PORT}`);
});
JS

# --- Frontend env points at the server
printf "VITE_IMG_API_URL=http://localhost:8787/api/txt2img\n" > .env.local
echo "Wrote .env.local"

# --- Server env (fill in your Stability key)
if [ ! -f server/imagegen/.env ]; then
  cat > server/imagegen/.env <<'ENV'
STABILITY_API_KEY=REPLACE_ME
PORT=8787
ENV
  echo "Wrote server/imagegen/.env (EDIT: put your real STABILITY_API_KEY)"
fi

# --- Add npm script (use Node to avoid shell quoting issues)
node -e "const fs=require('fs');const p='package.json';const pkg=JSON.parse(fs.readFileSync(p,'utf8'));pkg.scripts=pkg.scripts||{};pkg.scripts.imgserver='node server/imagegen/server.js';fs.writeFileSync(p,JSON.stringify(pkg,null,2));console.log('package.json updated (script: imgserver)');"

# --- Install server deps
npm i express dotenv
echo "✔ Setup complete."
echo "Next:"
echo "1) Edit server/imagegen/.env → set STABILITY_API_KEY"
echo "2) Terminal A: npm run imgserver"
echo "3) Terminal B: npm run dev"
echo "4) Use the ImageGen panel → Generate"
STABILITY_API_KEY=REPLACE_ME
PORT=8787
