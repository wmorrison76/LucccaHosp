// frontend/src/lib/themeEngine.js
// Safe, minimal engine that only writes CSS vars on <html>

const KEY = "lu:design:theme:v2";
const DEFAULTS = {
  "--font-xs": "11px",
  "--font-sm": "13px",
  "--font-md": "15px",
  "--font-lg": "18px",
  "--font-xl": "24px",
  "--accent": "#16E0FF",
  mode: "auto", // "dark" | "light" | "auto"
};

function html() {
  return typeof document !== "undefined" ? document.documentElement : null;
}

function setVar(k, v) {
  const r = html();
  if (r) r.style.setProperty(k, String(v));
}

function applyVars(vars) {
  try {
    Object.entries(vars).forEach(([k, v]) => {
      if (k && k.startsWith("--")) setVar(k, v);
    });
  } catch (e) {
    console.warn("[theme] applyVars skipped:", e);
  }
}

function readVars() {
  try {
    return JSON.parse(localStorage.getItem(KEY) || "{}") || {};
  } catch {
    return {};
  }
}

function writeVars(next) {
  try {
    localStorage.setItem(KEY, JSON.stringify(next));
  } catch (e) {
    console.warn("[theme] persist skipped:", e);
  }
}

function setModeAttr(mode) {
  const r = html();
  if (r) r.dataset.mode = mode || "auto";
}

/** Initialize once, after DOM is reachable */
export function initTheme() {
  const run = () => {
    const saved = readVars();
    const merged = { ...DEFAULTS, ...saved };
    setModeAttr(merged.mode);
    applyVars(merged);
    return merged;
  };

  if (!html()) {
    // If called too early, defer to next frame
    if (typeof window !== "undefined") {
      window.requestAnimationFrame(run);
    }
    return DEFAULTS;
  }
  return run();
}

export function previewTheme(next = {}) {
  if (!next || typeof next !== "object") return;
  if (next.mode) setModeAttr(next.mode);
  applyVars(next);
}

export function commitTheme(next = {}) {
  const merged = { ...readVars(), ...next };
  writeVars(merged);
  previewTheme(merged);
}

export function resetTheme() {
  try { localStorage.removeItem(KEY); } catch {}
  previewTheme(DEFAULTS);
}
